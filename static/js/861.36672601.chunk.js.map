{"version":3,"file":"static/js/861.36672601.chunk.js","mappings":"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","sources":["pages/ContactsView/ContactsView.styled.js","components/PhonebookForm/PhonebookForm.styled.js","components/PhonebookForm/PhonebookForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ListItem/ListItem.styled.js","components/ListItem/ListItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsView/ContactsView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  position: relative;\n  height: 100vh;\n  width: 500px;\n  left: 300px;\n  margin-top: 50px;\n  justify-content: center;\n  font-size: 40px;\n  color: #010101;\n`;\n\nexport const Title = styled.h1`\n  font-size: 40px;\n  font-weight: 700;\n  margin-bottom: 32px;\n`;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormContainer = styled(Form)`\n  width: 400px;\n  border: 1px solid #000;\n  padding: 20px;\n  margin-bottom: 32px;\n`;\n\nexport const LabelName = styled.label`\n  display: block;\n  font-size: 25px;\n\n  :not(:first-of-type) {\n    margin-top: 20px;\n  }\n`;\n\nexport const NameInput = styled(Field)`\n  margin-top: 15px;\n  display: block;\n  font-size: 16px;\n  padding: 4px;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  padding: 4px;\n  margin-top: 32px;\n  cursor: pointer;\n`;\nexport const Error = styled(ErrorMessage)`\n  font-size: 16px;\n  color: red;\n`;\n","import { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/operations';\nimport { useContacts } from 'hooks';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  FormContainer,\n  LabelName,\n  NameInput,\n  Button,\n  Error,\n} from './PhonebookForm.styled';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().min(4).required(),\n});\n\nexport default function PhonebookForm() {\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  const contactsNameCheck = name => {\n    const normalizedName = name.toLowerCase();\n    return contacts.find(contact =>\n      contact.name.toLowerCase().includes(normalizedName)\n    );\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    contactsNameCheck(values.name)\n      ? toast.error(`${values.name} is already in contacts!`)\n      : dispatch(addContact(values));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormContainer autoComplete=\"off\">\n        <LabelName>\n          Name\n          <NameInput\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <Error name=\"name\" component=\"div\" />\n        </LabelName>\n        <LabelName>\n          Number\n          <NameInput\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <Error name=\"number\" component=\"div\" />\n        </LabelName>\n        <Button type=\"submit\">Add contact</Button>\n      </FormContainer>\n    </Formik>\n  );\n}\n","import styled from 'styled-components';\n\nexport const LabelName = styled.label`\n  display: block;\n  font-size: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  margin-top: 4px;\n  display: block;\n  font-size: 14px;\n  padding: 4px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport { useContacts } from 'hooks';\nimport { LabelName, FilterInput } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const { filter } = useContacts();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <LabelName>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={filter}\n        onChange={handleChange}\n      ></FilterInput>\n    </LabelName>\n  );\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: 64px;\n`;\n","import styled from 'styled-components';\n\nexport const ListItemText = styled.li`\n  font-size: 20px;\n  margin-top: 8px;\n`;\n\nexport const Button = styled.button`\n  font-size: 14px;\n  margin-left: 8px;\n  background-color: transparent;\n  color: #f44336;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const Text = styled.p`\n  display: inline;\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { MdClose } from 'react-icons/md';\nimport PropTypes from 'prop-types';\nimport { ListItemText, Button, Text } from './ListItem.styled';\n\nexport default function ListItem({ contact }) {\n  const dispatch = useDispatch();\n\n  const { id, name, number } = contact;\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ListItemText>\n      <Text>\n        {name}: {number}\n      </Text>\n      <Button type=\"button\" onClick={handleDelete}>\n        <MdClose size={24} />\n      </Button>\n    </ListItemText>\n  );\n}\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { toast } from 'react-toastify';\nimport { fetchContacts } from 'redux/operations';\nimport { useContacts } from 'hooks';\nimport { List } from './ContactList.styled';\nimport ListItem from 'components/ListItem';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const { isLoading, error, visibleContacts } = useContacts();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {error && toast.error('Ooops, something went wrong. Please, try again')}\n      {visibleContacts.length > 0 && (\n        <List>\n          {visibleContacts.map(contact => {\n            return <ListItem key={contact.id} contact={contact}></ListItem>;\n          })}\n        </List>\n      )}\n      {isLoading && <RotatingLines strokeColor=\"#4fa94d\"></RotatingLines>}\n    </div>\n  );\n}\n","import { Container, Title } from './ContactsView.styled';\nimport PhonebookForm from 'components/PhonebookForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nexport default function ContactsView() {\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <PhonebookForm></PhonebookForm>\n\n      <Title>Contacts</Title>\n      <Filter></Filter>\n      <ContactList></ContactList>\n    </Container>\n  );\n}\n"],"names":["Container","styled","Title","FormContainer","Form","LabelName","NameInput","Field","Button","Error","ErrorMessage","schema","yup","shape","name","required","number","min","PhonebookForm","dispatch","useDispatch","contacts","useContacts","initialValues","onSubmit","values","resetForm","normalizedName","toLowerCase","find","contact","includes","contactsNameCheck","addContact","toast","validationSchema","autoComplete","type","pattern","title","component","FilterInput","Filter","filter","value","onChange","event","setFilter","target","List","ListItemText","Text","ListItem","id","onClick","deleteContact","size","ContactList","isLoading","error","visibleContacts","useEffect","fetchContacts","length","map","strokeColor","ContactsView"],"sourceRoot":""}